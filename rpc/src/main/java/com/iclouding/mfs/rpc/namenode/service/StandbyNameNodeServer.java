// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StandbyNameNodeServer.proto

package com.iclouding.mfs.rpc.namenode.service;

public final class StandbyNameNodeServer {
  private StandbyNameNodeServer() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\033StandbyNameNodeServer.proto\022\036com.iclou" +
      "ding.mfs.rpc.namenode\032\033StandByNameNodePr" +
      "otol.proto2\224\001\n\026StandbyNameNodeService\022z\n" +
      "\rfetchEditLogs\0223.com.iclouding.mfs.rpc.n" +
      "amenode.FetchEditLogRequest\0324.com.icloud" +
      "ing.mfs.rpc.namenode.FetchEditLogRespons" +
      "eBA\n&com.iclouding.mfs.rpc.namenode.serv" +
      "iceB\025StandbyNameNodeServerP\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.iclouding.mfs.rpc.namenode.model.StandbyNameNodeProtol.getDescriptor(),
        }, assigner);
    com.iclouding.mfs.rpc.namenode.model.StandbyNameNodeProtol.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
